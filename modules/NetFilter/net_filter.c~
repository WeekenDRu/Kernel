#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/netfilter.h>
#include <linux/netfilter_ipv4.h>
#include <linux/skbuff.h>
#include <linux/ip.h>
#include <linux/tcp.h>

struct nf_hook_ops bundle;

unsigned int hook_func_droptcp(void *priv,
			       struct sk_buff *skb,
			       const struct nf_hook_state *state)
{
	struct iphdr *ip;
	struct tcphdr *tcp;

	if(skb->protocol == htons(ETH_P_IP))
	{
		ip = (struct iphdr *)skb_network_header(skb);

		if(ip->version == 4 && ip->protocol == IPPROTO_TCP)
		{
			skb_set_transport_header(skb, ip->ihl * 4);

			tcp = (struct tcphdr *)skb_transport_header(skb);

			if(tcp->dest == htons(63000))
			{
				return NF_DROP;
			}
			else
			{
				return NF_ACCEPT;
			}
		}	
	}

	return NF_ACCEPT;
}

static int Init(void)
{ 
	int ret = 0;
	printk(KERN_INFO "Start net_filter\n");

	bundle.hook = hook_func_droptcp;
	bundle.hooknum = NF_INET_PRE_ROUTING;
	bundle.pf = PF_INET;
	bundle.priority = NF_IP_PRI_FIRST;

	ret = nf_register_hook(&bundle);
	if(ret)
	{
		printk(KERN_INFO "Problem register net_filter\n");
	}
	return ret;
}

static void Exit(void)
{
	nf_unregister_hook(&bundle);
	printk(KERN_INFO "End net_filter\n");
}

module_init(Init);
module_exit(Exit);

MODULE_LICENSE("GPL");
